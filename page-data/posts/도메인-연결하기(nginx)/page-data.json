{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/도메인-연결하기(nginx)","result":{"data":{"markdownRemark":{"id":"61e0a669-7143-5959-b67a-bd07ae75e124","html":"<p>lets Encrypt을 이용하여 무료인증서를 발급받아서 https 설정을 해보자</p>\n<h2 id=\"lets-encrypt\" style=\"position:relative;\"><a href=\"#lets-encrypt\" aria-label=\"lets encrypt permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>lets Encrypt</h2>\n<p>비영리 단체라고 한다. 무료지만 3개월에 한번씩 갱신해줘야하는 번거로움이 있다.<br>\n크론탭을 이용하여 자동화 시키는 방법이 있다.<br>\n그런데 수동으로 갱신할 때, nginx 또는 apache를 끄고 해야 에러가 없었는데…<br>\n확인해봐야겠다.( 그동안 Standalone plugin으로 설치를 진행해서 생긴 문제였다. )</p>\n<h3 id=\"plugin\" style=\"position:relative;\"><a href=\"#plugin\" aria-label=\"plugin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>plugin</h3>\n<ul>\n<li>Standalone : cerabot 자체가 웹서버 포트를 똑같이 사용하기 때문에, 이 경우 갱신이나 발급시 기존 웹서버를 꺼야한다.</li>\n<li>Webroot: web server root 에 인증서 발급, 웹서버를 중단하지 않아도 된다.</li>\n<li>Apache, Nginx: 각 웹서버 플러그인이 자동으로 발급.</li>\n<li>Manual: Certbot의 서버와 운영 서버가 다를 경우.</li>\n</ul>\n<h3 id=\"install\" style=\"position:relative;\"><a href=\"#install\" aria-label=\"install permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>install</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">apt install certbot\nletsencrypt --version</code></pre></div>\n<h3 id=\"인증서-발급\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%A6%9D%EC%84%9C-%EB%B0%9C%EA%B8%89\" aria-label=\"인증서 발급 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인증서 발급</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">certbot --nginx -d example.com -d www.example.com\ncertbot certonly --webroot --webroot-path=/var/html/example -d example.com -d dev.example.com</code></pre></div>\n<p>둘 중 웹루트 플러그인으로 발급을 진행해보겠다.</p>\n<h3 id=\"도메인-연결하기가상호스트\" style=\"position:relative;\"><a href=\"#%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%97%B0%EA%B2%B0%ED%95%98%EA%B8%B0%EA%B0%80%EC%83%81%ED%98%B8%EC%8A%A4%ED%8A%B8\" aria-label=\"도메인 연결하기가상호스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도메인 연결하기(가상호스트)</h3>\n<p>여기서 삽질을 많이 했다.<br>\n무료 도메인을 발급 받은 뒤 내 서버의 아이피를 추가했고 제대로 연결된 것까지 확인했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ping worldone.project.zone</code></pre></div>\n<p>nginx와 php fpm은 제대로 돌아가고 있었고 502 에러가 떴다.\nhtml 파일은 잘 보이는데 php가 문제였다.\nconf파일 문제인 듯 하여 이리저리 만져봤고\nfpm의 pool.d에 있는\n\nlisten = /run/php/ubuntu.sock</p>\n<p>nginx의 .conf에 있는 </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">fastcgi_pass unix:/run/php/ubuntu.sock;</code></pre></div>\n<p>이게 일치해야한다. 수정하니 잘 된다.   </p>\n<h4 id=\"defalutconf\" style=\"position:relative;\"><a href=\"#defalutconf\" aria-label=\"defalutconf permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>defalut.conf</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">server {\n    listen       80 default_server;\n    server_name  localhost;\n    return 444;\n}</code></pre></div>\n<p>정해진 도메인 외에 접근 안되도록 처리</p>\n<h4 id=\"도메인-연결\" style=\"position:relative;\"><a href=\"#%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%97%B0%EA%B2%B0\" aria-label=\"도메인 연결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도메인 연결</h4>\n<p>일단 http로 연결 되도록 설정했다. 아래 내용만 넣어도 동작은 잘된다.   </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">server {\n    listen       80;\n    server_name  world-one.project.zone;\n    root   /var/www/html/world-one.project.zone;\n\n    access_log /var/log/nginx/world-one.project.zone.access.log main;\n    error_log  /var/log/nginx/world-one.project.zone.error.log error;\n\n    location / {\n        index  index.php index.html;\n    }\n\n    # Add PHP handler\n    location ~ [^/]\\.php(/|$) {\n        fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n        if (!-f $document_root$fastcgi_script_name) {\n            return 404;\n        }\n\n        fastcgi_read_timeout 300;\n        fastcgi_pass unix:/run/php/ubuntu.sock;\n        fastcgi_index index.php;\n        fastcgi_buffers 64 16k; # default 8 4k\n\n        include fastcgi_params;\n    }\n}</code></pre></div>\n<p>여기서 환경설정을 쉽게 볼 수 있다.\n<a href=\"https://webmaster.cafe/tools/nginx-conf-generator/my-example-site.com.php\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://webmaster.cafe/tools/nginx-conf-generator/my-example-site.com.php</a></p>\n<p>생성 하게 되면 아래와 같이 많은 내용이 들어간다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">server {\n    listen       80;\n    server_name  samplesite.com www.samplesite.com anothersite.net;\n    root   /home/myuser1/www;\n\n    server_tokens off;\n\n    add_header X-Frame-Options SAMEORIGIN;\n    add_header X-Content-Type-Options nosniff;\n    add_header X-XSS-Protection &quot;1; mode=block&quot;;\n\n    charset utf-8;\n\n    #set same size as post_max_size(php.ini or php_admin_value).\n    client_max_body_size 10M;\n\n    access_log /var/log/nginx/samplesite.com.access.log main;\n    error_log  /var/log/nginx/samplesite.com.error.log error;\n \n    location / {\n        index  index.php index.html;\n    }\n \n    # Allow Lets Encrypt Domain Validation Program\n    location ^~ /.well-known/acme-challenge/ {\n        allow all;\n    }\n \n    # Block dot file (.htaccess .htpasswd .svn .git .env and so on.)\n    location ~ /\\. {\n        deny all;\n    }\n \n    # Block (log file, binary, certificate, shell script, sql dump file) access.\n    location ~* \\.(log|binary|pem|enc|crt|conf|cnf|sql|sh|key|yml|lock)$ {\n        deny all;\n    }\n \n    # Block access\n    location ~* (composer\\.json|composer\\.lock|composer\\.phar|contributing\\.md|license\\.txt|readme\\.rst|readme\\.md|readme\\.txt|copyright|artisan|gulpfile\\.js|package\\.json|phpunit\\.xml|access_log|error_log|gruntfile\\.js)$ {\n        deny all;\n    }\n \n    location = /favicon.ico {\n        log_not_found off;\n        access_log off;\n    }\n \n    location = /robots.txt {\n        log_not_found off;\n        access_log off;\n    }\n \n    # Block .php file inside upload folder. uploads(wp), files(drupal), data(gnuboard).\n    location ~* /(?:uploads|default/files|data)/.*\\.php$ {\n        deny all;\n    }\n \n    # Add PHP handler\n    location ~ [^/]\\.php(/|$) {\n        fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n        if (!-f $document_root$fastcgi_script_name) {\n            return 404;\n        }\n\n        fastcgi_read_timeout 300;\n        fastcgi_pass unix:/run/php/myuser1.sock;\n        fastcgi_index index.php;\n        fastcgi_buffers 64 16k; # default 8 4k\n\n        include fastcgi_params;\n    }\n}</code></pre></div>\n<h3 id=\"ssl\" style=\"position:relative;\"><a href=\"#ssl\" aria-label=\"ssl permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ssl</h3>\n<p>원하는 주소의 인증서를 발급 받는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">certbot certonly --webroot --webroot-path=/var/html/example -d example.com -d dev.example.com</code></pre></div>\n<p>보안을 위한 디프헬만그룹 추가</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048</code></pre></div>\n<p>기존 conf 파일에 http로 접속했을시 https로 리다이렉트 되도록 처리</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">server {\n    listen 80;\n    server_name example.com www.example.com;\n    return 301 https://$host$request_uri;\n}\n\n \tisten 443 ssl;\n    root   /var/www/html/worldone.project.zone;\n\n    ssl_certificate /etc/letsencrypt/live/worldone.project.zone/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/worldone.project.zone/privkey.pem;\n\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n    ssl_dhparam /etc/ssl/certs/dhparam.pem;\n    ssl_ciphers &#39;ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA&#39;;\n    ssl_session_timeout 1d;\n    ssl_session_cache shared:SSL:50m;\n    ssl_stapling on;\n    ssl_stapling_verify on;\n    add_header Strict-Transport-Security max-age=15768000;</code></pre></div>\n<p>위 내용을 추가하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">nginx -t\nservice nginx reload</code></pre></div>\n<p>리다이렉트까지는 잘 되는데 https에서 연결이 안된다면?<br>\naws 보안그룹 인바운드를 체크해보자!   </p>\n<p>여기까지 도메인 연결 및 가상호스트, ssl 설정까지 완료<br>\napache와는 다르게 그냥 .conf 파일만 추가해도 알아서 연결이 된다.<br>\n심볼릭 링크라던가 이런걸 하지않았는데도 연결이 잘됐다.<br>\napache에서는 a2ensite로 따로 등록했었다.   </p>","fields":{"slug":"/posts/도메인-연결하기(nginx)","tagSlugs":["/tag/devops/","/tag/aws/","/tag/web-development/"]},"frontmatter":{"date":"2020-03-02","description":"가상호스트 및 https 설정하기(nginx + php-fpm)","tags":["devops","aws","Web Development"],"title":"도메인 연결하기(nginx)","socialImage":"/bg_work.jpg"}}},"pageContext":{"slug":"/posts/도메인-연결하기(nginx)"}}}