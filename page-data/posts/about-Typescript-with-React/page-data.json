{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/about-Typescript-with-React","result":{"data":{"markdownRemark":{"id":"5a6c45e1-99cd-554d-9ad8-00eba92dc182","html":"<h3 id=\"typescript란\" style=\"position:relative;\"><a href=\"#typescript%EB%9E%80\" aria-label=\"typescript란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Typescript란</h3>\n<p>이름에 담겨 있듯 가장 큰 특성은 타입을 명확하게 지정할 수 있다는 것이다.<br>\nJavascript의 모든 것을 그대로 사용가능하다. 별도의 언어가 아니라 상위 버전이라고 생각하면 된다.<br>\n마이크로소프트(2012년 발표)에서 만든 것으로 VSC에서 사용할 경우 자체에서 오류를 바로바로 표시해주는 등 매우 편리하다.   </p>\n<h3 id=\"맛보기\" style=\"position:relative;\"><a href=\"#%EB%A7%9B%EB%B3%B4%EA%B8%B0\" aria-label=\"맛보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>맛보기</h3>\n<p>일단 간단히 한번 만들어보았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">yarn init -y\nyarn global add typescript\ntsc --init</code></pre></div>\n<p>tsconfig.json 이란 파일이 생성된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  &quot;compilerOptions&quot;: {\n    /* Basic Options */\n    // &quot;incremental&quot;: true,                   /* Enable incremental compilation */\n    &quot;target&quot;: &quot;es5&quot;,                          /* Specify ECMAScript target version: &#39;ES3&#39; (default), &#39;ES5&#39;, &#39;ES2015&#39;, &#39;ES2016&#39;, &#39;ES2017&#39;, &#39;ES2018&#39;, &#39;ES2019&#39;, &#39;ES2020&#39;, or &#39;ESNEXT&#39;. */\n    &quot;module&quot;: &quot;commonjs&quot;,                     /* Specify module code generation: &#39;none&#39;, &#39;commonjs&#39;, &#39;amd&#39;, &#39;system&#39;, &#39;umd&#39;, &#39;es2015&#39;, &#39;es2020&#39;, or &#39;ESNext&#39;. */\n    // &quot;lib&quot;: [],                             /* Specify library files to be included in the compilation. */\n    // &quot;allowJs&quot;: true,                       /* Allow javascript files to be compiled. */\n    // &quot;checkJs&quot;: true,                       /* Report errors in .js files. */\n    // &quot;jsx&quot;: &quot;preserve&quot;,                     /* Specify JSX code generation: &#39;preserve&#39;, &#39;react-native&#39;, or &#39;react&#39;. */\n    // &quot;declaration&quot;: true,                   /* Generates corresponding &#39;.d.ts&#39; file. */\n    // &quot;declarationMap&quot;: true,                /* Generates a sourcemap for each corresponding &#39;.d.ts&#39; file. */\n    // &quot;sourceMap&quot;: true,                     /* Generates corresponding &#39;.map&#39; file. */\n    // &quot;outFile&quot;: &quot;./&quot;,                       /* Concatenate and emit output to single file. */\n    &quot;outDir&quot;: &quot;./dist&quot;,                        /* Redirect output structure to the directory. */\n    // &quot;rootDir&quot;: &quot;./&quot;,                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */\n    // &quot;composite&quot;: true,                     /* Enable project compilation */\n    // &quot;tsBuildInfoFile&quot;: &quot;./&quot;,               /* Specify file to store incremental compilation information */\n    // &quot;removeComments&quot;: true,                /* Do not emit comments to output. */\n    // &quot;noEmit&quot;: true,                        /* Do not emit outputs. */\n    // &quot;importHelpers&quot;: true,                 /* Import emit helpers from &#39;tslib&#39;. */\n    // &quot;downlevelIteration&quot;: true,            /* Provide full support for iterables in &#39;for-of&#39;, spread, and destructuring when targeting &#39;ES5&#39; or &#39;ES3&#39;. */\n    // &quot;isolatedModules&quot;: true,               /* Transpile each file as a separate module (similar to &#39;ts.transpileModule&#39;). */\n\n\n   ...\n\n    /* Advanced Options */\n    &quot;forceConsistentCasingInFileNames&quot;: true  /* Disallow inconsistently-cased references to the same file. */\n  }\n}</code></pre></div>\n<p>많은 옵션이 있고 대부분 주석처리 되어있다.<br>\n이중 outdir만 수정해서 돌려봤다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">touch index.ts\n console.log(&#39;hello world&#39;)\ntsc\nnode ./dist/index\nhello wolrd</code></pre></div>\n<p>dist 폴더와 그 안에 index.js가 생성된다.   </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let msg: string;\nmsg = 1;\nconsole.log(msg);</code></pre></div>\n<p>당연하지만 에러가 난다. 그전에 vsc에서 오류를 빨간줄로 잡아준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">index.ts:3:1 - error TS2322: Type &#39;1&#39; is not assignable to type &#39;string&#39;.\n\n3 msg = 1;</code></pre></div>\n<h4 id=\"create-react-app\" style=\"position:relative;\"><a href=\"#create-react-app\" aria-label=\"create react app permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>create-react-app</h4>\n<p>CRA로 한번 typescript 연습을 해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npx create-react-app my-app --template typescript\n# or\nyarn create react-app my-app --template typescript</code></pre></div>\n<h5 id=\"global-path-env\" style=\"position:relative;\"><a href=\"#global-path-env\" aria-label=\"global path env permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>global path, env</h5>\n<p>일단 Global path를 설정했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">yarn add babel-plugin-module-resolver\ntouch babel.config.js\n  \n  const plugins = [\n      [&quot;module-resolver&quot;, {\n      // &quot;root&quot;: [&quot;./src&quot;],\n      &quot;alias&quot;: {\n        &quot;@&quot;: &quot;./src&quot;,\n        &quot;#&quot;: &quot;./src/scss&quot;\n      }\n    }]\n  ];</code></pre></div>\n<p>babel 플러그인으로 path를 지정했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">app.jsx\nimport &#39;#/app.scss&#39;;</code></pre></div>\n<p>webpack.confg.js를 수정하기 위해 eject를 실행했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">yarn eject\n\n{\n  test: sassRegex,\n  exclude: sassModuleRegex,\n  use: getStyleLoaders(\n    {\n      importLoaders: 3,\n      sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,\n    }\n  ).concat({\n    loader: require.resolve(&#39;sass-loader&#39;),\n    options: { \n      sassOptions:{\n        includePaths: [ \n          paths.appSrc+&#39;/scss/layouts&#39;,\n          paths.appSrc+&#39;/scss/base&#39;,\n          paths.appSrc+&#39;/scss/components&#39;,\n          paths.appSrc+&#39;/scss/pages&#39;\n        ]\n      },\n      prependData: `@import &#39;./src/scss/utilities/variables&#39;;`\n    }\n  }),</code></pre></div>\n<p>폴더 구성에 따라 includePaths를 추가해주었다.\nvariables는 변수를 사용하기 위해 prepend해두었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.env.local</code></pre></div>\n<p>파일 추가한 뒤 환경변수를 넣었다.   REACT<em>APP</em> 이런식으로 붙여야 변수가 인식이 된다.<br>\n짧게 줄이기 위해 dotenv 설정이 있는 env.js를 수정해보았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// const REACT_APP = /^REACT_APP_/i;\nconst REACT_APP = /^_/i;</code></pre></div>\n<p>typescript에선 tsx path 설정시 tsconfig.json도 함께 수정해주어야한다.</p>\n<p>babel.config.js</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  &quot;alias&quot;: {\n      &quot;@&quot;: &quot;./src/views&quot;,\n  }</code></pre></div>\n<p>tsconfig.json</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&quot;compilerOptions&quot;: {\n    &quot;baseUrl&quot;: &quot;.&quot;,\n    &quot;paths&quot;: {\n      &quot;@/*&quot;: [&quot;./src/views/*&quot;],\n    },</code></pre></div>\n<p>위와 같이 추가해줘야 typescript 환경에서도 잘 돌아간다.</p>\n<h5 id=\"router-추가하기\" style=\"position:relative;\"><a href=\"#router-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\" aria-label=\"router 추가하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>router 추가하기</h5>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">yarn add @types/react-router-dom</code></pre></div>\n<h4 id=\"props로-넘겨보기\" style=\"position:relative;\"><a href=\"#props%EB%A1%9C-%EB%84%98%EA%B2%A8%EB%B3%B4%EA%B8%B0\" aria-label=\"props로 넘겨보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>props로 넘겨보기</h4>\n<p>Router에서 메뉴를 데이터 형식으로 만들어서 header에 props넘겨서 처리하려고 했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">header.tsx\nconst Header = ({menuList}:object) =&gt;{</code></pre></div>\n<p>Router.tsx에는 interface로 타입을 명시했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const menuList: menu[] = [\n  { name: &#39;Home&#39;, path: &#39;/&#39; },\n  { name: &#39;Weather&#39;, path: &#39;/weather&#39; },\n]\n&lt;Header menuList = {menuList}, title=&quot;React Typescript&quot; age={12} /&gt;</code></pre></div>\n<p>Header.tsx</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">interface menu{\n    name: string,\n    path: string\n}\ninterface info{\n    name : string,\n    age :number\n}\nconst Header = ({menuList}:any, {name, number}:info) =&gt;{\n    return (\n        &lt;header className=&quot;header&quot;&gt;\n            &lt;div className=&quot;wrap&quot;&gt;\n                &lt;nav className=&quot;header__nav&quot;&gt;\n                    &lt;ul className=&quot;nav__menu__list&quot;&gt;\n                        {menuList.map((item:menu, index:number)=&gt;{\n                            return (\n                            &lt;li key={index}&gt;\n                                &lt;Link className=&quot;nav__menu__anchor&quot; to={item.path}&gt;{item.name}&lt;/Link&gt;\n                            &lt;/li&gt;\n                            );\n                        })}\n                        \n                    &lt;/ul&gt;\n                &lt;/nav&gt;\n            &lt;/div&gt;\n        &lt;/header&gt;\n    );\n\n}</code></pre></div>\n<p>menuList는 menu[], array, object 다 에러가 난다…<br>\n일단 any로 해두고 나중에 다른 방법이 있으면 수정해야겠다.   </p>\n<h4 id=\"weather-페이지-만들기\" style=\"position:relative;\"><a href=\"#weather-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"weather 페이지 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>weather 페이지 만들기</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">interface State{\n    info : info\n}\ninterface info{\n    weather : string,\n    description: string,\n    temp: number,\n    feel_temp: number,\n    temp_min: number,\n    temp_max: number,\n    pressure: number,\n    humidity: number,\n    visibility: number,\n    wind_speed: number,\n    wind_deg: number,\n    wind_gust: number,\n    cloud: number,\n    sunrise: number,\n    sunset: number\n}\n\nclass Weather extends React.Component&lt;object,State&gt;{\n\n    constructor(props:object){\n        super(props);\n        this.getData();\n        this.state = {\n            info : {\n    .\n    .\n    .</code></pre></div>\n<p>constructor에 props도 type을 정해줘야한다.<br>\nState로 넣은 interface가 state의 type과 맞지 않으면 에러가 난다.   </p>\n<p>좀 더 예쁘고 효율적인 구조를 생각하다가 수정했다.   </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">interface State{\n\tinfo : info[]\n}\ninterface info{\n\tname: string,\n\tvalue: string | number \n}</code></pre></div>\n<p>데이터는 아래와 같이 넣어서 실제로 렌더링 할때는 loop로 돌렸다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">set = [\n    { name: &quot;날씨&quot;, value: d.weather[0][&#39;main&#39;] },\n    { name: &quot;날씨 요약&quot;, value: d.weather[0][&#39;description&#39;] },\n    { name: &quot;기온&quot;, value: this.tempFixed(d.main.temp) },\n    { name: &quot;체감온도&quot;, value: this.tempFixed(d.main.feels_like) },\n    { name: &quot;최저기온&quot;, value: this.tempFixed(d.main.temp_min) },\n    { name: &quot;최고기온&quot;, value: this.tempFixed(d.main.temp_max) },\n    { name: &quot;기압&quot;, value: d.main.pressure+&#39; hPa&#39; },\n    { name: &quot;습도&quot;, value: d.main.humidity+ &#39; %&#39; },\n    { name: &quot;시정&quot;, value: d.visibility / 1000 +&#39; km&#39; },\n    { name: &quot;풍속&quot;, value: d.wind.speed+ &#39; km/h&#39; },\n    { name: &quot;풍향&quot;, value: d.wind.deg },\n    { name: &quot;돌풍&quot;, value: d.wind.gust? d.wind.gust : &#39;없음&#39; },\n    { name: &quot;구름&quot;, value: d.clouds.all },\n    { name: &quot;일출&quot;, value: this.timeToDate(d.sys.sunrise) },\n    { name: &quot;일몰&quot;, value: this.timeToDate(d.sys.sunset) },\n  ]\n\n  this.setState({ info : set })\n\n---------------------------------------------------\n\n{this.state.info.map( (item, index) =&gt; {\n    return  (\n      &lt;li className=&quot;weather__info__item&quot; key={index}&gt;\n        &lt;span className=&quot;key&quot;&gt;{item.name}&lt;/span&gt;\n        &lt;span className=&quot;value&quot;&gt;{item.value}&lt;/span&gt;\n      &lt;/li&gt;\n    ); \n  })}</code></pre></div>\n<p>찾아보니 interface외에도 class나 type을 이용하여 타입을 명시할 수 있다.   </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">interface State{\n    info : info\n}\n\n-------------------\nclass Info{\n  public weather: string;\n  public speed: number\n  constructor(weather: string, speed: number){\n    this.weather = weather;\n    this.speed = speed;\n  }\n}</code></pre></div>\n<h4 id=\"간단하게-만들어본-후기\" style=\"position:relative;\"><a href=\"#%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B8-%ED%9B%84%EA%B8%B0\" aria-label=\"간단하게 만들어본 후기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>간단하게 만들어본 후기</h4>\n<p>확실히 그냥 js로 만들때보다 뭔가 빡빡하다.<br>\nPHP에서도 타입을 미리 정하거나 하진 않아서 확실히 낯설었다.<br>\n항상 소규모의 작업만 해왔기에 필요성을 크게 느끼진 못했었다.<br>\n대규모 프로젝트와 많은 이와 협업을 하는 환경에서는 디버그와 테스트 시간을 줄이는데<br>\n큰 도움이 되지 않을까 싶다.</p>\n<p><a href=\"https://world-one.github.io/react-toy/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://world-one.github.io/react-toy/</a></p>","fields":{"slug":"/posts/about-Typescript-with-React","tagSlugs":["/tag/javascript/","/tag/typescript/","/tag/create-react-app/"]},"frontmatter":{"date":"2020-03-13","description":"React(CRA) 세팅과 함께 Typescript 사용하기","tags":["javascript","typescript","create react app"],"title":"Typescript with CRA","socialImage":"/bg_work.jpg"}}},"pageContext":{"slug":"/posts/about-Typescript-with-React"}}}